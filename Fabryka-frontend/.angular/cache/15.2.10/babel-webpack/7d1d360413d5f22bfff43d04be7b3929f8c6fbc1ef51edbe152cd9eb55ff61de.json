{"ast":null,"code":"export function negativeValidator(control) {\n  if (control.value < 0) {\n    return {\n      'valueIsNegative': true\n    };\n  }\n  return null;\n}\nexport function checkIfNumber(control) {\n  if (isNaN(Number(control.value))) {\n    return {\n      'notANumber': true\n    };\n  }\n  return null;\n}\nexport function checkIfNumberPositive(control) {\n  let temp = Number(control.value);\n  if (isNaN(temp)) {\n    return {\n      'notANumber': true\n    };\n  }\n  if (!Number.isInteger(temp)) {\n    return {\n      'notAInteger': true\n    };\n  }\n  return null;\n}\nexport function checkIfNumberInRange(control) {\n  const left = 0;\n  const right = 1;\n  let temp = Number(control.value);\n  if (isNaN(temp)) {\n    return {\n      'notANumber': true\n    };\n  }\n  if (temp < left || temp > right) {\n    return {\n      'notInRange': true\n    };\n  }\n  return null;\n}\nexport function checkIfNumberPositiveFloat(control) {\n  let temp = Number(control.value);\n  if (isNaN(temp)) {\n    return {\n      'notANumber': true\n    };\n  }\n  if (temp < 0) {\n    return {\n      'negativeNumber': true\n    };\n  }\n  return null;\n}","map":{"version":3,"mappings":"AAEA,OAAM,SAAUA,iBAAiB,CAACC,OAAoB;EAClD,IAAGA,OAAO,CAACC,KAAK,GAAG,CAAC,EAAE;IAClB,OAAO;MAAC,iBAAiB,EAAE;IAAI,CAAC;;EAGpC,OAAO,IAAI;AACf;AAEA,OAAM,SAAUC,aAAa,CAACF,OAAoB;EAC9C,IAAIG,KAAK,CAACC,MAAM,CAACJ,OAAO,CAACC,KAAK,CAAC,CAAC,EAAE;IAC9B,OAAO;MAAC,YAAY,EAAE;IAAI,CAAC;;EAG/B,OAAO,IAAI;AACf;AAEA,OAAM,SAAUI,qBAAqB,CAACL,OAAoB;EACtD,IAAIM,IAAI,GAAGF,MAAM,CAACJ,OAAO,CAACC,KAAK,CAAC;EAChC,IAAGE,KAAK,CAACG,IAAI,CAAC,EAAE;IACZ,OAAO;MAAC,YAAY,EAAE;IAAI,CAAC;;EAG/B,IAAG,CAACF,MAAM,CAACG,SAAS,CAACD,IAAI,CAAC,EAAE;IACxB,OAAO;MAAC,aAAa,EAAE;IAAI,CAAC;;EAGhC,OAAO,IAAI;AACf;AAEA,OAAM,SAAUE,oBAAoB,CAACR,OAAoB;EACrD,MAAMS,IAAI,GAAG,CAAC;EACd,MAAMC,KAAK,GAAG,CAAC;EACf,IAAIJ,IAAI,GAAGF,MAAM,CAACJ,OAAO,CAACC,KAAK,CAAC;EAChC,IAAGE,KAAK,CAACG,IAAI,CAAC,EAAE;IACZ,OAAO;MAAC,YAAY,EAAE;IAAI,CAAC;;EAG/B,IAAGA,IAAI,GAAGG,IAAI,IAAIH,IAAI,GAAGI,KAAK,EAAE;IAC5B,OAAO;MAAC,YAAY,EAAE;IAAI,CAAC;;EAG/B,OAAO,IAAI;AACf;AAEA,OAAM,SAAUC,0BAA0B,CAACX,OAAoB;EAC3D,IAAIM,IAAI,GAAGF,MAAM,CAACJ,OAAO,CAACC,KAAK,CAAC;EAChC,IAAGE,KAAK,CAACG,IAAI,CAAC,EAAE;IACZ,OAAO;MAAC,YAAY,EAAE;IAAI,CAAC;;EAG/B,IAAGA,IAAI,GAAG,CAAC,EAAE;IACT,OAAO;MAAC,gBAAgB,EAAE;IAAI,CAAC;;EAGnC,OAAO,IAAI;AACf","names":["negativeValidator","control","value","checkIfNumber","isNaN","Number","checkIfNumberPositive","temp","isInteger","checkIfNumberInRange","left","right","checkIfNumberPositiveFloat"],"sourceRoot":"","sources":["C:\\Users\\jnchl\\Desktop\\elektron\\Badania_Operacyjne_2.0\\JavaWersjaSkrypt\\src\\app\\customization\\Validators.ts"],"sourcesContent":["import { FormControl } from \"@angular/forms\";\r\n\r\nexport function negativeValidator(control: FormControl): {[s: string]: boolean} {\r\n    if(control.value < 0) {\r\n        return {'valueIsNegative': true}\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function checkIfNumber(control: FormControl): {[s: string]: boolean} {\r\n    if (isNaN(Number(control.value))) {\r\n        return {'notANumber': true};\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function checkIfNumberPositive(control: FormControl): {[s: string]: boolean} {\r\n    let temp = Number(control.value);\r\n    if(isNaN(temp)) {\r\n        return {'notANumber': true};\r\n    }\r\n\r\n    if(!Number.isInteger(temp)) {\r\n        return {'notAInteger': true};\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function checkIfNumberInRange(control: FormControl): {[s: string]: boolean} {\r\n    const left = 0;\r\n    const right = 1;\r\n    let temp = Number(control.value);\r\n    if(isNaN(temp)) {\r\n        return {'notANumber': true};\r\n    }\r\n\r\n    if(temp < left || temp > right) {\r\n        return {'notInRange': true};\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function checkIfNumberPositiveFloat(control: FormControl): {[s: string]: boolean} {\r\n    let temp = Number(control.value);\r\n    if(isNaN(temp)) {\r\n        return {'notANumber': true};\r\n    }\r\n\r\n    if(temp < 0) {\r\n        return {'negativeNumber': true};\r\n    }\r\n\r\n    return null;\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}