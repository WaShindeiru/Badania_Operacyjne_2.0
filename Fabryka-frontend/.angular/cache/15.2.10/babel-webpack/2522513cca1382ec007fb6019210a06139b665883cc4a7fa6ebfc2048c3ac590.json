{"ast":null,"code":"export function negativeValidator(control) {\n  if (control.value < 0) {\n    return {\n      'valueIsNegative': true\n    };\n  }\n  return null;\n}\nexport function checkIfNumber(control) {\n  if (isNaN(Number(control.value))) {\n    return {\n      'notANumber': true\n    };\n  }\n  return null;\n}\nexport function checkIfNumberPositive(control) {\n  let temp = Number(control.value);\n  if (isNaN(temp)) {\n    return {\n      'notANumber': true\n    };\n  }\n  if (!Number.isInteger(temp)) {\n    return {\n      'notAInteger': true\n    };\n  }\n  return null;\n}\nexport function checkIfNumberInRange(control) {\n  const left = 0;\n  const right = 1;\n  let temp = Number(control.value);\n  if (isNaN(temp)) {\n    return {\n      'notANumber': true\n    };\n  }\n  if (temp < left || temp > right) {\n    return {\n      'notInRange': true\n    };\n  }\n  return null;\n}\nexport function checkIfNumberPositiveFloat(control) {\n  let temp = Number(control.value);\n  if (isNaN(temp)) {\n    return {\n      'notANumber': true\n    };\n  }\n  if (temp < 0) {\n    return {\n      'negativeNumber': true\n    };\n  }\n  return null;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}